/**
 *
 *  Messages.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace dro
{

class Messages
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _guid;
        static const std::string _conversation_id;
        static const std::string _sender_id;
        static const std::string _message_type;
        static const std::string _message;
        static const std::string _created_at;
        static const std::string _deleted_at;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = int32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Messages(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Messages(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Messages(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Messages() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const int32_t &pId) noexcept;

    /**  For column guid  */
    ///Get the value of the column guid, returns the default value if the column is null
    const std::string &getValueOfGuid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getGuid() const noexcept;
    ///Set the value of the column guid
    void setGuid(const std::string &pGuid) noexcept;
    void setGuid(std::string &&pGuid) noexcept;

    /**  For column conversation_id  */
    ///Get the value of the column conversation_id, returns the default value if the column is null
    const int32_t &getValueOfConversationId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getConversationId() const noexcept;
    ///Set the value of the column conversation_id
    void setConversationId(const int32_t &pConversationId) noexcept;

    /**  For column sender_id  */
    ///Get the value of the column sender_id, returns the default value if the column is null
    const int32_t &getValueOfSenderId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getSenderId() const noexcept;
    ///Set the value of the column sender_id
    void setSenderId(const int32_t &pSenderId) noexcept;

    /**  For column message_type  */
    ///Get the value of the column message_type, returns the default value if the column is null
    const std::string &getValueOfMessageType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getMessageType() const noexcept;
    ///Set the value of the column message_type
    void setMessageType(const std::string &pMessageType) noexcept;
    void setMessageType(std::string &&pMessageType) noexcept;

    /**  For column message  */
    ///Get the value of the column message, returns the default value if the column is null
    const std::string &getValueOfMessage() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getMessage() const noexcept;
    ///Set the value of the column message
    void setMessage(const std::string &pMessage) noexcept;
    void setMessage(std::string &&pMessage) noexcept;

    /**  For column created_at  */
    ///Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    ///Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;

    /**  For column deleted_at  */
    ///Get the value of the column deleted_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfDeletedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getDeletedAt() const noexcept;
    ///Set the value of the column deleted_at
    void setDeletedAt(const ::trantor::Date &pDeletedAt) noexcept;


    static size_t getColumnNumber() noexcept {  return 8;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Messages>;
    friend drogon::orm::BaseBuilder<Messages, true, true>;
    friend drogon::orm::BaseBuilder<Messages, true, false>;
    friend drogon::orm::BaseBuilder<Messages, false, true>;
    friend drogon::orm::BaseBuilder<Messages, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Messages>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> id_;
    std::shared_ptr<std::string> guid_;
    std::shared_ptr<int32_t> conversationId_;
    std::shared_ptr<int32_t> senderId_;
    std::shared_ptr<std::string> messageType_;
    std::shared_ptr<std::string> message_;
    std::shared_ptr<::trantor::Date> createdAt_;
    std::shared_ptr<::trantor::Date> deletedAt_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[8]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[0])
        {
            sql += "id,";
            ++parametersCount;
        }
        if(dirtyFlag_[1])
        {
            sql += "guid,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "conversation_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "sender_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "message_type,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "message,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "created_at,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "deleted_at,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        if(dirtyFlag_[0])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace dro
} // namespace drogon_model
